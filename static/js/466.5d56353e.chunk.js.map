{"version":3,"file":"static/js/466.5d56353e.chunk.js","mappings":"4QAEaA,EAAgBC,EAAAA,GAAAA,IAAH,6HAQbC,EAAYD,EAAAA,GAAAA,GAAH,0JASTE,EAAYF,EAAAA,GAAAA,GAAH,wSAeTG,EAAYH,EAAAA,GAAAA,EAAH,kE,6ICjCtB,GAAgB,WAAa,8BAA8B,kBAAoB,qCAAqC,iBAAmB,qC,yBCYxH,SAASI,IAEtB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAcC,GAAd,WACA,GAAoCD,EAAAA,EAAAA,UAAS,IAA7C,eAAOE,EAAP,KAAmBC,EAAnB,KACA,GAAsCC,EAAAA,EAAAA,MAAtC,eAAKC,EAAL,KAAmBC,EAAnB,KAEMC,GAAWC,EAAAA,EAAAA,MAiCXC,EAAgB,mCAAG,uGACjBC,EAAW,gCACXC,EAAM,oCAENC,EAAcP,EAAaQ,IAAI,WACD,KAAhBD,EALG,wDAOjBE,EAPiB,UAOT,IAAIC,gBAAgBR,EAASS,QAAQH,IAAI,gBAPhC,QAO4C,GAE7DI,EAAO,IAAIF,gBAAgB,CAC/BG,QAASP,EACTG,MAAAA,EACAK,KAAM,EACNC,eAAe,IAGXC,EAhBiB,UAgBRX,EAhBQ,wBAgBgBO,GAhBhB,UAkBOK,MAAMD,GAlBb,eAkBjBE,EAlBiB,iBAmBPA,EAAgBC,OAnBT,eAmBjBC,EAnBiB,yBAqBhBtB,EAAcsB,IArBE,4CAAH,qDA8CtB,OAPAC,EAAAA,EAAAA,YAAU,WACyB,MAA7BrB,EAAaQ,IAAI,UACnBJ,MAGD,KAGD,4BACE,kBAAMkB,UAAWC,EAAAA,WAAcC,SAflB,SAAAC,GACfA,EAAEC,iBAEFtB,KAYE,WACE,oBAAQuB,KAAK,SAASL,UAAWC,EAAAA,kBAAjC,WACE,iBAAMD,UAAWC,EAAAA,gBACjB,SAAC,MAAD,QAGF,kBACEK,MACgC,OAA9B5B,EAAaQ,IAAI,SAAoB,GAAKR,EAAaQ,IAAI,SAE7DqB,SAlCU,SAAAJ,GAChB7B,EAAS6B,EAAEK,OAAOF,OACK,KAAnBH,EAAEK,OAAOF,MAIb3B,EAAgB,CAAEQ,MAAOgB,EAAEK,OAAOF,QAHhC3B,EAAgB,KAgCZqB,UAAWC,EAAAA,iBACXI,KAAK,OACLI,aAAa,MACbC,WAAS,EACTC,YAAY,oBAIhB,SAAC,KAAD,WACE,SAAC,KAAD,UACGpC,EAAWqC,SACVrC,EAAWqC,QAAQC,KAAI,SAAAC,GAAU,IAAD,EAC9B,OACE,SAAC,KAAD,CACEC,GAAE,UAAKD,EAAME,IACbC,MAAO,CAAEC,KAAMtC,GAFjB,UAKE,UAAC,KAAD,CAAWoC,GAAIF,EAAME,GAArB,UACGF,EAAMK,aACL,gBAAKC,IA9GN,kCA8GwBN,EAAMK,YAAaE,IAAI,MAE9C,gBAAKD,IAAKE,EAAQD,IAAI,GAAGE,MAAO,IAAKC,OAAQ,OAE/C,UAAC,KAAD,qBAAYV,EAAMW,YAAlB,QAA0BX,EAAMY,MAAhC,QACA,uBAAIZ,EAAMa,eATPb,EAAME,gB","sources":["components/HomePage/HomePage.styled.js","webpack://goit-react-hw-05-movies/./src/components/MoviesPage/MoviePage.module.css?9658","components/MoviesPage/MoviePage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const FilmContainer = styled.div`\n  display: flex;\n  width: 1400px;\n  flex-wrap: wrap;\n  margin-right: auto;\n  margin-left: auto;\n`;\n\nexport const FilmsList = styled.ul`\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n  flex-wrap: wrap;\n  gap: 40px;\n\n  padding: 40px 0;\n`;\nexport const FilmsItem = styled.li`\n  width: 300px;\n  height: 600px;\n  gap: 20px;\n  overflow: hidden;\n  transition: transform 250ms ease;\n\n  -webkit-box-shadow: -1px 2px 10px 3px rgba(0, 0, 0, 0.84);\n  box-shadow: -1px 2px 10px 3px rgba(0, 0, 0, 0.84);\n\n  :hover {\n    transform: scale(1.1);\n  }\n`;\n\nexport const FilmTitle = styled.p`\n  font-size: 20px;\n  font-weight: 600;\n`;\n","// extracted by mini-css-extract-plugin\nexport default {\"SearchForm\":\"MoviePage_SearchForm__y3Idt\",\"SearchForm_button\":\"MoviePage_SearchForm_button__7MDRG\",\"SearchForm_input\":\"MoviePage_SearchForm_input__1XRSc\"};","import { useState, useEffect } from 'react';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\nimport {\n  FilmContainer,\n  FilmsItem,\n  FilmsList,\n  FilmTitle,\n} from '../HomePage/HomePage.styled';\n\nimport s from './MoviePage.module.css';\nimport Poster from 'img/instagram-g6f508c30b_640.png';\nimport { FcSearch } from 'react-icons/fc';\n\nexport default function MoviePage() {\n  // eslint-disable-next-line no-unused-vars\n  const [query, setQuery] = useState('');\n  const [foundMovie, setFoundMovie] = useState([]);\n  let [searchParams, setSearchParams] = useSearchParams();\n  // const location = useLocation();\n  const location = useLocation();\n\n  const imgBaseUrl = 'https://image.tmdb.org/t/p/w300';\n\n  // useEffect(() => {\n  //   const searchQuery = searchParams.get('query');\n  //   if (!searchQuery || searchQuery === '') return;\n\n  //   const searchQueryMovie = async () => {\n  //     const BASE_URL = 'https://api.themoviedb.org/3/';\n  //     const key = '39268a7cf0f5a62bddedb30e59a8c087';\n\n  //     const query = new URLSearchParams(location.search).get('query') ?? '';\n\n  //     const meta = new URLSearchParams({\n  //       api_key: key,\n  //       query,\n  //       page: 1,\n  //       include_adult: false,\n  //     });\n\n  //     const url = `${BASE_URL}search/movie?${meta}`;\n\n  //     const fetchQueryMovie = await fetch(url);\n  //     const r = await fetchQueryMovie.json();\n\n  //     return setFoundMovie(r);\n  //   };\n\n  //   searchQueryMovie();\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [query, searchParams, setSearchParams]);\n\n  const searchQueryMovie = async () => {\n    const BASE_URL = 'https://api.themoviedb.org/3/';\n    const key = '39268a7cf0f5a62bddedb30e59a8c087';\n\n    const searchQuery = searchParams.get('query');\n    if (!searchQuery || searchQuery === '') return;\n\n    const query = new URLSearchParams(location.search).get('query') ?? '';\n\n    const meta = new URLSearchParams({\n      api_key: key,\n      query,\n      page: 1,\n      include_adult: false,\n    });\n\n    const url = `${BASE_URL}search/movie?${meta}`;\n\n    const fetchQueryMovie = await fetch(url);\n    const r = await fetchQueryMovie.json();\n\n    return setFoundMovie(r);\n  };\n\n  const saveQuery = e => {\n    setQuery(e.target.value);\n    if (e.target.value === '') {\n      setSearchParams({});\n      return;\n    }\n    setSearchParams({ query: e.target.value });\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    searchQueryMovie();\n  };\n\n  useEffect(() => {\n    if (searchParams.get('query') != null) {\n      searchQueryMovie();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div>\n      <form className={s.SearchForm} onSubmit={onSubmit}>\n        <button type=\"submit\" className={s.SearchForm_button}>\n          <span className={s.button_label}></span>\n          <FcSearch />\n        </button>\n\n        <input\n          value={\n            searchParams.get('query') === null ? '' : searchParams.get('query')\n          }\n          onChange={saveQuery}\n          className={s.SearchForm_input}\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search Film\"\n        />\n      </form>\n\n      <FilmContainer>\n        <FilmsList>\n          {foundMovie.results &&\n            foundMovie.results.map(movie => {\n              return (\n                <Link\n                  to={`${movie.id}`}\n                  state={{ from: location }}\n                  key={movie.id}\n                >\n                  <FilmsItem id={movie.id}>\n                    {movie.poster_path ? (\n                      <img src={imgBaseUrl + movie.poster_path} alt=\"\"></img>\n                    ) : (\n                      <img src={Poster} alt=\"\" width={320} height={450}></img>\n                    )}\n                    <FilmTitle>{movie.name ?? movie.title} </FilmTitle>\n                    <p>{movie.overview}</p>\n                  </FilmsItem>\n                </Link>\n              );\n            })}\n        </FilmsList>\n      </FilmContainer>\n    </div>\n  );\n}\n"],"names":["FilmContainer","styled","FilmsList","FilmsItem","FilmTitle","MoviePage","useState","setQuery","foundMovie","setFoundMovie","useSearchParams","searchParams","setSearchParams","location","useLocation","searchQueryMovie","BASE_URL","key","searchQuery","get","query","URLSearchParams","search","meta","api_key","page","include_adult","url","fetch","fetchQueryMovie","json","r","useEffect","className","s","onSubmit","e","preventDefault","type","value","onChange","target","autoComplete","autoFocus","placeholder","results","map","movie","to","id","state","from","poster_path","src","alt","Poster","width","height","name","title","overview"],"sourceRoot":""}